# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc,sys,os
# sys.path.append(os.path.join(os.getcwd(),'../example'))


from example import PaddleXserver_pb2 as PaddleXserver__pb2


class PaddleXserverStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.paddlex_init = channel.unary_unary(
                '/example.PaddleXserver/paddlex_init',
                request_serializer=PaddleXserver__pb2.paddlex_init_cmd.SerializeToString,
                response_deserializer=PaddleXserver__pb2.paddlex_init_result.FromString,
                )
        self.paddlex_predict_cls = channel.unary_unary(
                '/example.PaddleXserver/paddlex_predict_cls',
                request_serializer=PaddleXserver__pb2.image.SerializeToString,
                response_deserializer=PaddleXserver__pb2.cls_inputs_result.FromString,
                )
        self.paddlex_predict_det = channel.unary_unary(
                '/example.PaddleXserver/paddlex_predict_det',
                request_serializer=PaddleXserver__pb2.image.SerializeToString,
                response_deserializer=PaddleXserver__pb2.det_inputs_result.FromString,
                )
        self.paddlex_predict_det_seg = channel.unary_unary(
                '/example.PaddleXserver/paddlex_predict_det_seg',
                request_serializer=PaddleXserver__pb2.image.SerializeToString,
                response_deserializer=PaddleXserver__pb2.det_seg_inputs_result.FromString,
                )
        self.paddlex_predict_seg = channel.unary_unary(
                '/example.PaddleXserver/paddlex_predict_seg',
                request_serializer=PaddleXserver__pb2.image.SerializeToString,
                response_deserializer=PaddleXserver__pb2.seg_inputs_result.FromString,
                )


class PaddleXserverServicer(object):
    """Missing associated documentation comment in .proto file."""

    def paddlex_init(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def paddlex_predict_cls(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def paddlex_predict_det(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def paddlex_predict_det_seg(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def paddlex_predict_seg(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PaddleXserverServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'paddlex_init': grpc.unary_unary_rpc_method_handler(
                    servicer.paddlex_init,
                    request_deserializer=PaddleXserver__pb2.paddlex_init_cmd.FromString,
                    response_serializer=PaddleXserver__pb2.paddlex_init_result.SerializeToString,
            ),
            'paddlex_predict_cls': grpc.unary_unary_rpc_method_handler(
                    servicer.paddlex_predict_cls,
                    request_deserializer=PaddleXserver__pb2.image.FromString,
                    response_serializer=PaddleXserver__pb2.cls_inputs_result.SerializeToString,
            ),
            'paddlex_predict_det': grpc.unary_unary_rpc_method_handler(
                    servicer.paddlex_predict_det,
                    request_deserializer=PaddleXserver__pb2.image.FromString,
                    response_serializer=PaddleXserver__pb2.det_inputs_result.SerializeToString,
            ),
            'paddlex_predict_det_seg': grpc.unary_unary_rpc_method_handler(
                    servicer.paddlex_predict_det_seg,
                    request_deserializer=PaddleXserver__pb2.image.FromString,
                    response_serializer=PaddleXserver__pb2.det_seg_inputs_result.SerializeToString,
            ),
            'paddlex_predict_seg': grpc.unary_unary_rpc_method_handler(
                    servicer.paddlex_predict_seg,
                    request_deserializer=PaddleXserver__pb2.image.FromString,
                    response_serializer=PaddleXserver__pb2.seg_inputs_result.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'example.PaddleXserver', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PaddleXserver(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def paddlex_init(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/example.PaddleXserver/paddlex_init',
            PaddleXserver__pb2.paddlex_init_cmd.SerializeToString,
            PaddleXserver__pb2.paddlex_init_result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def paddlex_predict_cls(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/example.PaddleXserver/paddlex_predict_cls',
            PaddleXserver__pb2.image.SerializeToString,
            PaddleXserver__pb2.cls_inputs_result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def paddlex_predict_det(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/example.PaddleXserver/paddlex_predict_det',
            PaddleXserver__pb2.image.SerializeToString,
            PaddleXserver__pb2.det_inputs_result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def paddlex_predict_det_seg(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/example.PaddleXserver/paddlex_predict_det_seg',
            PaddleXserver__pb2.image.SerializeToString,
            PaddleXserver__pb2.det_seg_inputs_result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def paddlex_predict_seg(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/example.PaddleXserver/paddlex_predict_seg',
            PaddleXserver__pb2.image.SerializeToString,
            PaddleXserver__pb2.seg_inputs_result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
